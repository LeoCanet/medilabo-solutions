# Docker Compose - Mediscreen Application
# Architecture microservices complète avec bases de données

#version: '3.8'

services:
  # Base de données MySQL pour le service Patient
  mysql-db:
    image: mysql:8.0
    container_name: mediscreen-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_HOST: "%"
    ports:
      - "3307:3306"  # Port externe différent pour éviter conflits
    volumes:
      - mysql_data:/var/lib/mysql
      - ./patient-service/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - mediscreen-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Base de données MongoDB pour le service Notes (préparé pour Sprint 2)
  mongodb:
    image: mongo:7.0
    container_name: mediscreen-mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
    ports:
      - "27018:27017"  # Port externe différent
    volumes:
      - mongodb_data:/data/db
      - ./init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - mediscreen-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Service Patient (Sprint 1) ✅
  patient-service:
    build:
      context: ./patient-service
      dockerfile: Dockerfile
    container_name: mediscreen-patient-service
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      # Configuration de la base de données
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql-db:3306/mediscreen_patients?createDatabaseIfNotExist=true&useUnicode=true&characterEncoding=utf8&useSSL=false&allowPublicKeyRetrieval=true&allowMultiQueries=true
      SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
      SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}

      # Configuration JPA/Hibernate
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "true"
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.MySQLDialect

      # Configuration de l'application
      SPRING_APPLICATION_NAME: patient-service

      # Credentials Basic Auth spécifiques Patient Service
      AUTH_USERNAME: ${AUTH_PATIENT_USERNAME}
      AUTH_PASSWORD: ${AUTH_PATIENT_PASSWORD}
    depends_on:
      mysql-db:
        condition: service_healthy
    networks:
      - mediscreen-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Service Gateway (Sprint 1) ✅
  gateway-service:
    build:
      context: ./gateway-service
      dockerfile: Dockerfile
    container_name: mediscreen-gateway
    restart: unless-stopped
    ports:
      - "8888:8888"
    environment:
      SPRING_APPLICATION_NAME: gateway-service

      # Credentials Basic Auth différenciés par service
      AUTH_USERNAME: ${AUTH_USERNAME}
      AUTH_PASSWORD: ${AUTH_PASSWORD}
      AUTH_PATIENT_USERNAME: ${AUTH_PATIENT_USERNAME}
      AUTH_PATIENT_PASSWORD: ${AUTH_PATIENT_PASSWORD}
      AUTH_NOTES_USERNAME: ${AUTH_NOTES_USERNAME}
      AUTH_NOTES_PASSWORD: ${AUTH_NOTES_PASSWORD}
      AUTH_ASSESSMENT_USERNAME: ${AUTH_ASSESSMENT_USERNAME}
      AUTH_ASSESSMENT_PASSWORD: ${AUTH_ASSESSMENT_PASSWORD}

      # Routes gérées par customRouteLocator dans SecurityConfig.java

    depends_on:
      patient-service:
        condition: service_healthy
      notes-service:
        condition: service_healthy
    networks:
      - mediscreen-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Service Frontend (Sprint 1)
  frontend-service:
    build:
      context: ./frontend-service
      dockerfile: Dockerfile
    container_name: mediscreen-frontend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      SPRING_APPLICATION_NAME: frontend-service

      # URL du Gateway
      FEIGN_CLIENT_URL: http://gateway-service:8888

      # Credentials Basic Auth pour authentification inter-services
      AUTH_USERNAME: ${AUTH_USERNAME}
      AUTH_PASSWORD: ${AUTH_PASSWORD}

      # Configuration des logs
      LOGGING_LEVEL_COM_MEDISCREEN_FRONTEND_CLIENT_PATIENTAPICLIENT: DEBUG

    depends_on:
      gateway-service:
        condition: service_healthy
    networks:
      - mediscreen-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Service Notes (Sprint 2)
  notes-service:
    build:
      context: ./notes-service
      dockerfile: Dockerfile
    container_name: mediscreen-notes-service
    restart: unless-stopped
    ports:
      - "8082:8082"
    environment:
      # Configuration MongoDB
      SPRING_DATA_MONGODB_URI: mongodb://${MYSQL_USER}:${MYSQL_PASSWORD}@mongodb:27017/mediscreen_notes?authSource=mediscreen_notes
      SPRING_DATA_MONGODB_DATABASE: mediscreen_notes

      # Configuration de l'application
      SPRING_APPLICATION_NAME: notes-service

      # Credentials Basic Auth spécifiques Notes Service
      AUTH_USERNAME: ${AUTH_NOTES_USERNAME}
      AUTH_PASSWORD: ${AUTH_NOTES_PASSWORD}

      # Configuration des logs
      LOGGING_LEVEL_COM_MEDISCREEN_NOTESSERVICE: DEBUG

    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - mediscreen-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Assessment Service (Sprint 3) - Microservice d'évaluation du risque diabète
  assessment-service:
    build:
      context: ./assessment-service
      dockerfile: Dockerfile
    container_name: mediscreen-assessment-service
    restart: unless-stopped
    ports:
      - "8083:8083"
    environment:
      # Configuration de l'application
      SPRING_APPLICATION_NAME: assessment-service

      # URL du Gateway pour communication sécurisée inter-services
      FEIGN_CLIENT_URL: http://gateway-service:8888

      # Credentials Basic Auth pour validation des requêtes Gateway
      AUTH_USERNAME: ${AUTH_ASSESSMENT_USERNAME}
      AUTH_PASSWORD: ${AUTH_ASSESSMENT_PASSWORD}

      # Configuration Java 21 Virtual Threads
      SPRING_THREADS_VIRTUAL_ENABLED: "true"
    depends_on:
      patient-service:
        condition: service_healthy
      notes-service:
        condition: service_healthy
      gateway-service:
        condition: service_started
    networks:
      - mediscreen-network
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

# Volumes persistants
volumes:
  mysql_data:
    name: mediscreen_mysql_data
  mongodb_data:
    name: mediscreen_mongodb_data

# Réseau dédié
networks:
  mediscreen-network:
    name: mediscreen-network
    driver: bridge